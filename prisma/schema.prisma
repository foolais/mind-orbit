// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  BACKLOG
  TODO
  INPROGRESS
  DONE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  Project       Project[]
  ProjectMember ProjectMember[]
  Task          Task[]
  Invitations   ProjectInvitation[]

  @@map("user")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  ownerId     String

  owner       User                @relation(fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  invitations ProjectInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project")
}

model ProjectMember {
  id        String @id @default(cuid())
  userId    String
  projectId String
  role      String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@map("projectmember")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(BACKLOG)
  priority    TaskPriority @default(MEDIUM)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?

  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("task")
}

model ProjectInvitation {
  id     String           @id @default(cuid())
  email  String
  token  String           @unique
  status InvitationStatus @default(PENDING)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  invitedBy   User   @relation(fields: [invitedById], references: [id])
  invitedById String

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("projectinvitation")
}
